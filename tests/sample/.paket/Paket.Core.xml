<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Paket.Core</name></assembly>
<members>
<member name="">

</member>
<member name="T:Chessie.ErrorHandling.AsyncResult`2">
<summary>
 Represents the result of an async computation
</summary>
</member>
<member name="T:Chessie.ErrorHandling.Result`2.Bad">
<summary>
 Represents the result of a failed computation.
</summary>
</member>
<member name="T:Chessie.ErrorHandling.Result`2.Ok">
<summary>
 Represents the result of a successful computation.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Result`2.Try(System.Func{`0})">
<summary>
 Executes the given function on a given success or captures the failure
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Result`2.ToString">
<summary>
 Converts the result into a string.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Result`2.Succeed(`0,System.Collections.Generic.IEnumerable{`1})">
<summary>
 Creates a Success result with the given value and the given message.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Result`2.Succeed(`0,`1)">
<summary>
 Creates a Success result with the given value and the given message.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Result`2.Succeed(`0)">
<summary>
 Creates a Success result with the given value.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Result`2.FailWith(`1)">
<summary>
 Creates a Failure result with the given message.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Result`2.FailWith(System.Collections.Generic.IEnumerable{`1})">
<summary>
 Creates a Failure result with the given messages.
</summary>
</member>
<member name="T:Chessie.ErrorHandling.Result`2">
<summary>
 Represents the result of a computation.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.AsyncExtensions.Async.ofAsyncResult``2(Chessie.ErrorHandling.AsyncResult{``0,``1})">
<summary>
 Creates an async computation from an asyncTrial computation
</summary>
</member>
<member name="M:Chessie.ErrorHandling.AsyncExtensions.Async.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Control.FSharpAsync{``0})">
<summary>
 Creates an async computation that runs a mapping function on the result of an async computation
</summary>
</member>
<member name="M:Chessie.ErrorHandling.AsyncExtensions.Async.bind``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{``1}},Microsoft.FSharp.Control.FSharpAsync{``0})">
<summary>
 Creates an async computation that runs a computation and
 when it generates a result run a binding function on the said result
</summary>
</member>
<member name="M:Chessie.ErrorHandling.AsyncExtensions.Async.singleton``1(``0)">
<summary>
 Creates an async computation that return the given value
</summary>
</member>
<member name="T:Chessie.ErrorHandling.AsyncExtensions.Async">
<summary>
 Useful functions for combining error handling computations with async computations.
</summary>
</member>
<member name="T:Chessie.ErrorHandling.AsyncExtensions">
<summary>
 Useful functions for combining error handling computations with async computations.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Chessie.ErrorHandling.AsyncTrial.AsyncTrialBuilder">
<summary>
 Builder type for error handling in async computation expressions.
</summary>
</member>
<member name="">

</member>
<member name="T:Chessie.ErrorHandling.AsyncTrial">
<summary>
 Basic support for async error handling computation
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.SucceededWith``2(Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 Returns the result or fails if the result was an error.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.SelectMany``4(Chessie.ErrorHandling.Result{``0,``1},System.Func{``0,Chessie.ErrorHandling.Result{``2,``1}},System.Func{``0,``2,``3})">
<summary>
 If the result is a Success it executes the given Func on the value.
 If the result of the Func is a Succes it maps it using the given Func.
 Otherwise the exisiting failure is propagated.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.SelectMany``3(Chessie.ErrorHandling.Result{``0,``1},System.Func{``0,Chessie.ErrorHandling.Result{``2,``1}})">
<summary>
 If the result is a Success it executes the given Func on the value.
 Otherwise the exisiting failure is propagated.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.Select``3(Chessie.ErrorHandling.Result{``0,``1},System.Func{``0,``2})">
<summary>
 Lifts a Func into a Result and applies it on the given result.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.Match``2(Chessie.ErrorHandling.Result{``0,``1},System.Action{``0,Microsoft.FSharp.Collections.FSharpList{``1}},System.Action{Microsoft.FSharp.Collections.FSharpList{``1}})">
<summary>
 Allows pattern matching on Results from C#.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.Map``3(Chessie.ErrorHandling.Result{``0,``1},System.Func{``0,``2})">
<summary>
 Lifts a Func into a Result and applies it on the given result.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.Flatten``2(Chessie.ErrorHandling.Result{System.Collections.Generic.IEnumerable{Chessie.ErrorHandling.Result{``0,``1}},``1})">
<summary>
 Collects a sequence of Results and accumulates their values.
 If the sequence contains an error the error will be propagated.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.FailedWith``2(Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 Returns the error messages or fails if the result was a success.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.Either``3(Chessie.ErrorHandling.Result{``0,``1},System.Func{``0,Microsoft.FSharp.Collections.FSharpList{``1},``2},System.Func{Microsoft.FSharp.Collections.FSharpList{``1},``2})">
<summary>
 Allows pattern matching on Results from C#.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.Collect``2(System.Collections.Generic.IEnumerable{Chessie.ErrorHandling.Result{``0,``1}})">
<summary>
 Collects a sequence of Results and accumulates their values.
 If the sequence contains an error the error will be propagated.
</summary>
</member>
<member name="">

</member>
<member name="T:Chessie.ErrorHandling.CSharp.ResultExtensions">
<summary>
 Extensions methods for easier C# usage.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Chessie.ErrorHandling.Trial.TrialBuilder">
<summary>
 Builder type for error handling computation expressions.
</summary>
</member>
<member name="P:Chessie.ErrorHandling.Trial.trial">
<summary>
 Wraps computations in an error handling computation expression.
</summary>
</member>
<member name="">

</member>
<member name="M:Chessie.ErrorHandling.Trial.|Pass|Warn|Fail|``2(Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 Categorizes a result based on its state and the presence of extra messages
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.failIfNone``2(``0,Microsoft.FSharp.Core.FSharpOption{``1})">
<summary>
 Converts an option into a Result.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.collect``2(System.Collections.Generic.IEnumerable{Chessie.ErrorHandling.Result{``0,``1}})">
<summary>
 Collects a sequence of Results and accumulates their values.
 If the sequence contains an error the error will be propagated.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.failureTee``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Core.Unit},Chessie.ErrorHandling.Result{``1,``0})">
<summary>
 If the result is a Failure it executes the given function on the messages.
 Result is propagated unchanged.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.successTee``2(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Core.Unit},Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 If the result is a Success it executes the given function on the value and the messages.
 Result is propagated unchanged.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.eitherTee``2(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Core.Unit},Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 If the result is a Success it executes the given success function on the value and the messages.
 If the result is a Failure it executes the given failure function on the messages.
 Result is propagated unchanged.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.lift2``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Chessie.ErrorHandling.Result{``0,``3},Chessie.ErrorHandling.Result{``1,``3})">
<summary>
 Promote a function to a monad/applicative, scanning the monadic/applicative arguments from left to right.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.op_LessBangGreater``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Chessie.ErrorHandling.Result{``0,``2})">
<summary>
 Lifts a function into a Result and applies it on the given result.
 This is the infix operator version of ErrorHandling.lift
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.lift``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Chessie.ErrorHandling.Result{``0,``2})">
<summary>
 Lifts a function into a Result container and applies it on the given result.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.op_LessMultiplyGreater``3(Chessie.ErrorHandling.Result{Microsoft.FSharp.Core.FSharpFunc{``0,``1},``2},Chessie.ErrorHandling.Result{``0,``2})">
<summary>
 If the wrapped function is a success and the given result is a success the function is applied on the value. 
 Otherwise the exisiting error messages are propagated.
 This is the infix operator version of ErrorHandling.apply
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.apply``3(Chessie.ErrorHandling.Result{Microsoft.FSharp.Core.FSharpFunc{``0,``1},``2},Chessie.ErrorHandling.Result{``0,``2})">
<summary>
 If the wrapped function is a success and the given result is a success the function is applied on the value. 
 Otherwise the exisiting error messages are propagated.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.op_GreaterGreaterEquals``3(Chessie.ErrorHandling.Result{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,Chessie.ErrorHandling.Result{``2,``1}})">
<summary>
 If the result is a Success it executes the given function on the value. 
 Otherwise the exisiting failure is propagated.
 This is the infix operator version of ErrorHandling.bind
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.flatten``2(Chessie.ErrorHandling.Result{Chessie.ErrorHandling.Result{``0,``1},``1})">
<summary>
 Flattens a nested result given the Failure types are equal
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.bind``3(Microsoft.FSharp.Core.FSharpFunc{``0,Chessie.ErrorHandling.Result{``1,``2}},Chessie.ErrorHandling.Result{``0,``2})">
<summary>
 If the result is a Success it executes the given function on the value.
 Otherwise the exisiting failure is propagated.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.mergeMessages``2(Microsoft.FSharp.Collections.FSharpList{``0},Chessie.ErrorHandling.Result{``1,``0})">
<summary>
 Appends the given messages with the messages in the given result.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.returnOrFail``2(Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 If the given result is a Success the wrapped value will be returned. 
Otherwise the function throws an exception with Failure message of the result.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.either``3(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,Microsoft.FSharp.Collections.FSharpList{``1}},``2},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``1},``2},Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 Takes a Result and maps it with fSuccess if it is a Success otherwise it maps it with fFailure.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.failed``2(Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 Returns true if the result was not successful.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.fail``2(``1)">
<summary>
 Wraps a message in a Failure
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.warn``2(``1,``0)">
<summary>
 Wraps a value in a Success and adds a message
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.pass``2(``0)">
<summary>
 Wraps a value in a Success
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.ok``2(``0)">
<summary>
 Wraps a value in a Success
</summary>
</member>
<member name="T:Chessie.ErrorHandling.Trial">
<summary>
 Basic combinators and operators for error handling.
</summary>
</member>
<member name="M:FSharp.Polyfill.AsyncExtensions.Async.Parallel.Static``2(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Control.FSharpAsync{``1})">
<summary>
 Runs both computations in parallel and returns the result as a tuple.
</summary>
</member>
<member name="T:FSharp.Polyfill.AsyncExtensions">
<summary>
 Extensions for async workflows.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.Globbing">
<summary>
 This module contains a file pattern globbing implementation.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Paket.Dependencies.RootPath">
<summary>
 Get the root path
</summary>
</member>
<member name="P:Paket.Dependencies.RootDirectory">
<summary>
 Get the root directory
</summary>
</member>
<member name="P:Paket.Dependencies.DependenciesFile">
<summary>
 Get path to dependencies file
</summary>
</member>
<member name="M:Paket.Dependencies.UpdatePackage(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
<summary>
 Updates the given package.
</summary>
</member>
<member name="M:Paket.Dependencies.UpdatePackage(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},System.Boolean,System.Boolean)">
<summary>
 Updates the given package.
</summary>
</member>
<member name="M:Paket.Dependencies.Update(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
<summary>
 Updates all dependencies.
</summary>
</member>
<member name="M:Paket.Dependencies.Update(System.Boolean,System.Boolean,System.Boolean)">
<summary>
 Updates all dependencies.
</summary>
</member>
<member name="M:Paket.Dependencies.Update(System.Boolean,System.Boolean)">
<summary>
 Updates all dependencies.
</summary>
</member>
<member name="M:Paket.Dependencies.TurnOnAutoRestore">
<summary>
 Pulls new paket.targets and bootstrapper and puts them into .paket folder.
</summary>
</member>
<member name="M:Paket.Dependencies.TurnOffAutoRestore">
<summary>
 Removes paket.targets file and Import section from project files.
</summary>
</member>
<member name="M:Paket.Dependencies.Simplify(System.Boolean)">
<summary>
 Converts the current package dependency graph to the simplest dependency graph.
</summary>
</member>
<member name="M:Paket.Dependencies.ShowReferencesFor(Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Shows all references files where the given package is referenced.
</summary>
</member>
<member name="M:Paket.Dependencies.ShowOutdated(System.Boolean,System.Boolean)">
<summary>
 Lists outdated packages.
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.Dependencies.Restore(System.Boolean,System.Boolean)">
<summary>
 Restores packages for all available paket.references files
 (or all packages if onlyReferenced is false)
</summary>
</member>
<member name="M:Paket.Dependencies.Restore(System.Boolean,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Restores the given paket.references files.
</summary>
</member>
<member name="M:Paket.Dependencies.Restore(Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Restores the given paket.references files.
</summary>
</member>
<member name="M:Paket.Dependencies.Restore">
<summary>
 Restores all dependencies.
</summary>
</member>
<member name="M:Paket.Dependencies.RemoveFromProject(System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
<summary>
 Removes the given package from the specified project
</summary>
</member>
<member name="M:Paket.Dependencies.Remove(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
<summary>
 Removes the given package from dependencies file.
</summary>
</member>
<member name="M:Paket.Dependencies.Remove(System.String)">
<summary>
 Removes the given package from dependencies file.
</summary>
</member>
<member name="M:Paket.Dependencies.Push(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Pushes a nupkg file.
</summary>
</member>
<member name="M:Paket.Dependencies.Process``1(Microsoft.FSharp.Core.FSharpFunc{Paket.PaketEnv,Chessie.ErrorHandling.Result{``0,Paket.Domain.DomainMessage}})">
<summary>
 Binds the given processing ROP function to current environment and executes it.
 Throws on failure.
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.Dependencies.Locate(System.String)">
<summary>
 Tries to locate the paket.dependencies file in the given folder or a parent folder.
</summary>
</member>
<member name="M:Paket.Dependencies.Locate">
<summary>
 Tries to locate the paket.dependencies file in the current folder or a parent folder.
</summary>
</member>
<member name="M:Paket.Dependencies.Install(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Creates a paket.dependencies file with the given text in the current directory and installs it.
</summary>
</member>
<member name="M:Paket.Dependencies.Install(Paket.InstallerOptions)">
<summary>
 Installs all dependencies.
</summary>
</member>
<member name="M:Paket.Dependencies.Install(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
<summary>
 Installs all dependencies.
</summary>
</member>
<member name="M:Paket.Dependencies.Install(System.Boolean,System.Boolean,System.Boolean)">
<summary>
 Installs all dependencies.
</summary>
</member>
<member name="M:Paket.Dependencies.Install(System.Boolean,System.Boolean)">
<summary>
 Installs all dependencies.
</summary>
</member>
<member name="M:Paket.Dependencies.Init(System.String)">
<summary>
 Initialize paket.dependencies file in the given directory
</summary>
</member>
<member name="M:Paket.Dependencies.Init">
<summary>
 Initialize paket.dependencies file in current directory
</summary>
</member>
<member name="M:Paket.Dependencies.GetSources">
<summary>
 Returns all sources from the dependencies file.
</summary>
</member>
<member name="M:Paket.Dependencies.GetLibraries(System.String,Paket.FrameworkIdentifier)">
<summary>
 Returns all libraries for the given package and framework.
</summary>
</member>
<member name="M:Paket.Dependencies.GetInstalledVersion(System.String)">
<summary>
 Returns the installed version of the given package.
</summary>
</member>
<member name="M:Paket.Dependencies.GetInstalledPackages(Paket.ReferencesFile)">
<summary>
 Returns the installed versions of all installed packages which are referenced in the references file.
</summary>
</member>
<member name="M:Paket.Dependencies.GetInstalledPackages">
<summary>
 Returns the installed versions of all installed packages.
</summary>
</member>
<member name="M:Paket.Dependencies.GetInstalledPackageModel(System.String)">
<summary>
 Returns an InstallModel for the given package.
</summary>
</member>
<member name="M:Paket.Dependencies.GetDirectDependenciesForPackage(System.String)">
<summary>
 Returns the direct dependencies for the given package.
</summary>
</member>
<member name="M:Paket.Dependencies.GetDirectDependencies">
<summary>
 Returns the installed versions of all direct dependencies.
</summary>
</member>
<member name="M:Paket.Dependencies.GetDirectDependencies(Paket.ReferencesFile)">
<summary>
 Returns the installed versions of all direct dependencies which are referenced in the references file.
</summary>
</member>
<member name="M:Paket.Dependencies.GetDefinedNuGetFeeds">
<summary>
 Returns all system-wide defined NuGet feeds. (Can be used for Autocompletion)
</summary>
</member>
<member name="M:Paket.Dependencies.FindReferencesFor(System.String)">
<summary>
 Finds all references files where the given package is referenced.
</summary>
</member>
<member name="M:Paket.Dependencies.FindProjectsFor(System.String)">
<summary>
 Finds all projects where the given package is referenced.
</summary>
</member>
<member name="M:Paket.Dependencies.FindOutdated(System.Boolean,System.Boolean)">
<summary>
 Finds all outdated packages.
</summary>
</member>
<member name="M:Paket.Dependencies.DownloadLatestBootstrapper">
<summary>
 Downloads the latest paket.bootstrapper into the .paket folder.
</summary>
</member>
<member name="M:Paket.Dependencies.ConvertFromNuget(System.Boolean,System.Boolean,System.Boolean,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.IO.DirectoryInfo})">
<summary>
 Converts the solution from NuGet to Paket.
</summary>
</member>
<member name="M:Paket.Dependencies.AddToProject(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean)">
<summary>
 Adds the given package with the given version to the dependencies file.
</summary>
</member>
<member name="M:Paket.Dependencies.AddToProject(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
<summary>
 Adds the given package with the given version to the dependencies file.
</summary>
</member>
<member name="M:Paket.Dependencies.AddCredentials(System.String,System.String)">
<summary>
 Adds credentials for a Nuget feed
</summary>
</member>
<member name="M:Paket.Dependencies.Add(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
<summary>
 Adds the given package with the given version to the dependencies file.
</summary>
</member>
<member name="M:Paket.Dependencies.Add(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
<summary>
 Adds the given package with the given version to the dependencies file.
</summary>
</member>
<member name="M:Paket.Dependencies.Add(System.String,System.String)">
<summary>
 Adds the given package with the given version to the dependencies file.
</summary>
</member>
<member name="M:Paket.Dependencies.Add(System.String)">
<summary>
 Adds the given package without version requirements to the dependencies file.
</summary>
</member>
<member name="">

</member>
<member name="T:Paket.Dependencies">
<summary>
 Paket API which is optimized for F# Interactive use.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.DependenciesFile.FindLockfile">
<summary>
 Find the matching lock file to a dependencies file
</summary>
</member>
<member name="M:Paket.DependenciesFile.FindLockfile(System.String)">
<summary>
 Find the matching lock file to a dependencies file
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.DependenciesFile">
<summary>
 Allows to parse and analyze paket.dependencies files.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.FileItem">
<summary>
 File item inside of project files.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.FrameworkAssemblyReference">
<summary>
 Framework assembly reference inside of nuspec files.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.FrameworkIdentifier">
<summary>
 Framework Identifier type.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.FrameworkVersion">
<summary>
 The Framework version.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.InstallOptions">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.InstallerOptions">
<summary>
 Force          - Force the download and reinstallation of all packages
 Hard           - Replace package references within project files even if they are not yet adhering
                  to the Paket&apos;s conventions (and hence considered manually managed)
 Redirects      - Create binding redirects for the NuGet packages
 OnlyReferenced - Only install packages that are referenced in paket.references files.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.LockFile.Save">
<summary>
 Updates the paket.lock file with the analyzed dependencies from the paket.dependencies file.
</summary>
</member>
<member name="M:Paket.LockFile.Parse(System.String,System.String[])">
<summary>
 Parses a paket.lock file from lines
</summary>
</member>
<member name="M:Paket.LockFile.LoadFrom(System.String)">
<summary>
 Parses a paket.lock file from file
</summary>
</member>
<member name="M:Paket.LockFile.IsDependencyOf(Paket.Domain.PackageName,Paket.Domain.PackageName)">
<summary>
 Checks if the first package is a dependency of the second package
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.LockFile.GetAllNormalizedDependenciesOf(Paket.Domain.NormalizedPackageName)">
<summary>
 Gets all dependencies of the given package
</summary>
</member>
<member name="M:Paket.LockFile.GetAllDependenciesOfSafe(Paket.Domain.PackageName)">
<summary>
 Gets all dependencies of the given package
</summary>
</member>
<member name="M:Paket.LockFile.GetAllDependenciesOf(Paket.Domain.PackageName)">
<summary>
 Gets all dependencies of the given package
</summary>
</member>
<member name="M:Paket.LockFile.Create(System.String,Paket.InstallOptions,Paket.PackageResolver.Resolution,Microsoft.FSharp.Collections.FSharpList{Paket.ModuleResolver.ResolvedSourceFile})">
<summary>
 Creates a paket.lock file at given location
</summary>
</member>
<member name="">

</member>
<member name="T:Paket.LockFile">
<summary>
 Allows to parse and analyze paket.lock files.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.NuspecReferences">
<summary>
  Nuspec reference type inside of nuspec files.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.PreRelease">
<summary>
 Information about PreRelease packages.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.PreReleaseStatus">
<summary>
 Defines if the range accepts prereleases
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.ProjectFile.FindAllProjects(System.String)">
<summary>
 Finds all project files
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.ProjectFile">
<summary>
 Contains methods to read and manipulate project files.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.ProjectOutputType">
<summary>
 Project output type.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.ProjectReference">
<summary>
 Project references inside of project files.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.ResolverStrategy">
<summary>
 Represents a resolver strategy.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Paket.SemVerInfo.Build">
<summary>
 The optional build no.
</summary>
</member>
<member name="P:Paket.SemVerInfo.PreRelease">
<summary>
 The optional PreRelease version
</summary>
</member>
<member name="P:Paket.SemVerInfo.Patch">
<summary>
 PATCH version when you make backwards-compatible bug fixes.
</summary>
</member>
<member name="P:Paket.SemVerInfo.Minor">
<summary>
 MINOR version when you add functionality in a backwards-compatible manner.
</summary>
</member>
<member name="P:Paket.SemVerInfo.Major">
<summary>
 MAJOR version when you make incompatible API changes.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.SemVerInfo">
<summary>
 Contains the version information.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.SolutionFile">
<summary>
 Contains methods to read and manipulate solution files.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.VersionRange.FormatInNuGetSyntax">
<summary>
 formats a VersionRange in NuGet syntax
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.VersionRange">
<summary>
 Represents version information.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.VersionRangeBound">
<summary>
 Defines if the range bound is including or excluding.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.VersionRequirement.Parse(System.String)">
<summary>
 Parses NuGet version range
</summary>
</member>
<member name="M:Paket.VersionRequirement.IsInRange(Paket.SemVerInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Checks wether the given version is in the version range
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.AddProcess">
<summary>
 Contains methods for addition of new packages
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.BindingRedirects.BindingRedirect">
<summary>
 Represents a binding redirection
</summary>
</member>
<member name="M:Paket.BindingRedirects.getPublicKeyToken(System.Reflection.Assembly)">
<summary>
 Calculates the short form of the public key token for use with binding redirects, if it exists.
</summary>
</member>
<member name="M:Paket.BindingRedirects.applyBindingRedirectsToFolder(System.String,System.Collections.Generic.IEnumerable{Paket.BindingRedirects.BindingRedirect})">
<summary>
 Applies a set of binding redirects to all .config files in a specific folder.
</summary>
</member>
<member name="M:Paket.BindingRedirects.applyBindingRedirects(System.Collections.Generic.IEnumerable{Paket.BindingRedirects.BindingRedirect},System.String)">
<summary>
 Applies a set of binding redirects to a single configuration file.
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.BindingRedirects.setRedirect(System.Xml.Linq.XDocument,Paket.BindingRedirects.BindingRedirect)">
<summary>
 Updates the supplied MSBuild document with the supplied binding redirect.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.BindingRedirects">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.ConfigFile.GetCredentials(System.String)">
<summary>
 Get the credential from the credential store for a specific source
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.ConfigFile.checkCredentials(System.String,Microsoft.FSharp.Core.FSharpOption{Paket.Utils.Auth})">
<summary>
 Check if the provided credentials for a specific source are correct
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.ConfigFile.Decrypt(System.String,System.String)">
<summary>
 Decrypt a encrypted string with a user specific keys
</summary>
</member>
<member name="M:Paket.ConfigFile.Encrypt(System.String)">
<summary>
 Encrypts a string with a user specific keys
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.ConfigFile">

</member>
<member name="P:Paket.Constants.MagicUnlistingDate">
<summary>
 The magic unpublished date is 1900-01-01T00:00:00
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.Constants">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.DependenciesFileParser">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.DependenciesFileSerializer">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.DependencyChangeDetection">

</member>
<member name="M:Paket.DependencyModel.CalcDependencies(Paket.DependenciesFile,System.String)">
<summary>
 Calculates the used dependencies for a project.
</summary>
</member>
<member name="M:Paket.DependencyModel.CalcDependenciesForReferencesFile(Paket.DependenciesFile,System.String)">
<summary>
 Calculates the used dependencies for given references file.
</summary>
</member>
<member name="M:Paket.DependencyModel.CalcDependenciesForDirectPackages(Paket.DependenciesFile,Microsoft.FSharp.Collections.FSharpList{Paket.Domain.PackageName})">
<summary>
 Calculates the used dependencies for the given direct references.
</summary>
</member>
<member name="T:Paket.DependencyModel">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.Domain.NormalizedPackageName">
<summary>
 Represents a normalized NuGet package name
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.Domain.PackageName">
<summary>
 Represents a NuGet package name
</summary>
</member>
<member name="P:Paket.Domain.NormalizedPackageName">
<summary>
 Function to convert a NuGet package name into a normalized one
</summary>
</member>
<member name="M:Paket.Domain.|NormalizedPackageName|(Paket.Domain.PackageName)">
<summary>
 Active recognizer to convert a NuGet package name into a normalized one
</summary>
</member>
<member name="M:Paket.Domain.PackageName(System.String)">
<summary>
 Function to convert a string into a NuGet package name
</summary>
</member>
<member name="M:Paket.Domain.|PackageName|(Paket.Domain.PackageName)">
<summary>
 Active recognizer to convert a NuGet package name into a string
</summary>
</member>
<member name="T:Paket.Domain">

</member>
<member name="M:Paket.FindOutdated.ShowOutdated(System.Boolean,System.Boolean,Paket.PaketEnv)">
<summary>
 Prints all outdated packages.
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.FindOutdated.FindOutdated(System.Boolean,System.Boolean,Paket.PaketEnv)">
<summary>
 Finds all outdated packages.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.FindOutdated">
<summary>
 Contains methods to find outdated packages.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.FindReferences">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.FrameworkDetection">

</member>
<member name="M:Paket.InstallProcess.Install(Microsoft.FSharp.Collections.FSharpList{Paket.PackageSources.PackageSource},Paket.InstallerOptions,Paket.LockFile)">
<summary>
 Installs all packages from the lock file.
</summary>
</member>
<member name="M:Paket.InstallProcess.InstallIntoProjects(Microsoft.FSharp.Collections.FSharpList{Paket.PackageSources.PackageSource},Paket.InstallerOptions,Paket.LockFile,Microsoft.FSharp.Collections.FSharpList{System.Tuple{Paket.ProjectFile,Paket.ReferencesFile}})">
<summary>
 Installs all packages from the lock file.
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.InstallProcess.applyBindingRedirects``1(System.String,System.Collections.Generic.IEnumerable{System.Tuple{``0,Paket.InstallModel}})">
<summary>
 Applies binding redirects for all strong-named references to all app. and web. config files.
</summary>
</member>
<member name="M:Paket.InstallProcess.createModel(System.String,Microsoft.FSharp.Collections.FSharpList{Paket.PackageSources.PackageSource},System.Boolean,Paket.LockFile,Microsoft.FSharp.Collections.FSharpSet{Paket.Domain.NormalizedPackageName})">
<summary>
 Restores the given packages from the lock file.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.InstallProcess">
<summary>
 Contains methods for the install process.
</summary>
</member>
<member name="">

</member>
<member name="T:Paket.KnownAliases">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.KnownTargetProfiles">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.LockFileParser">

</member>
<member name="">

</member>
<member name="M:Paket.LockFileSerializer.serializePackages(Paket.InstallOptions,Microsoft.FSharp.Collections.FSharpMap{Paket.Domain.NormalizedPackageName,Paket.PackageResolver.ResolvedPackage})">
<summary>
 [omit]
</summary>
</member>
<member name="T:Paket.LockFileSerializer">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.Logging">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.ModuleResolver">
<summary>
 Contains logic which helps to resolve the dependency graph for modules
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.NuGetConvert.NugetPackagesConfig">
<summary>
 Represents NuGet packages.config file
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.NuGetConvert.NugetPackagesConfigType">
<summary>
 Represents type of NuGet packages.config file
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.NuGetConvert.ConvertResultRModule">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.NuGetConvert.NugetEnvModule">

</member>
<member name="T:Paket.NuGetConvert">
<summary>
 Contains methods for NuGet conversion
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.NuGetV2.GetVersions(System.String,System.Collections.Generic.IEnumerable{Paket.PackageSources.PackageSource},Paket.Domain.PackageName)">
<summary>
 Allows to retrieve all version no. for a package from the given sources.
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.NuGetV2.GetTargetsFiles(System.String)">
<summary>
 Finds all targets files in a nuget package.
</summary>
</member>
<member name="M:Paket.NuGetV2.GetLibFiles(System.String)">
<summary>
 Finds all libraries in a nuget package.
</summary>
</member>
<member name="M:Paket.NuGetV2.DownloadPackage(System.String,Microsoft.FSharp.Core.FSharpOption{Paket.Utils.Auth},System.String,System.String,Paket.SemVerInfo,System.Boolean)">
<summary>
 Downloads the given package to the NuGet Cache folder
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.NuGetV2.CopyFromCache(System.String,System.String,System.String,System.String,Paket.SemVerInfo,System.Boolean)">
<summary>
 Extracts the given package to the ./packages folder
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.NuGetV2.ExtractPackage(System.String,System.String,System.String,Paket.SemVerInfo)">
<summary>
 Extracts the given package to the ./packages folder
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.NuGetV2.getDetailsFromLocalFile(System.String,System.String,Paket.Domain.PackageName,Paket.SemVerInfo)">
<summary>
 Reads direct dependencies from a nupkg file
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.NuGetV2.getDetailsFromNuget(System.Boolean,Microsoft.FSharp.Core.FSharpOption{Paket.Utils.Auth},System.String,System.String,Paket.SemVerInfo)">
<summary>
 Tries to get download link and direct dependencies from Nuget
 Caches calls into json file
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Paket.NuGetV2.CacheFolder">
<summary>
 The NuGet cache folder.
</summary>
</member>
<member name="M:Paket.NuGetV2.getDetailsFromNuGetViaOData(Microsoft.FSharp.Core.FSharpOption{Paket.Utils.Auth},System.String,System.String,Paket.SemVerInfo)">
<summary>
 Gets package details from Nuget via OData
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.NuGetV2.getAllVersionsFromLocalPath(System.String,System.String,System.String)">
<summary>
 Gets versions of the given package from local Nuget feed.
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.NuGetV2.getAllVersionsFromNuGet2(Microsoft.FSharp.Core.FSharpOption{Paket.Utils.Auth},System.String,System.String)">
<summary>
 Gets all versions no. of the given package.
</summary>
</member>
<member name="M:Paket.NuGetV2.getAllVersionsFromNugetOData(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Control.FSharpAsync{System.String}},System.String,System.String)">
<summary>
 Gets versions of the given package via OData via /FindPackagesById()?id=&apos;packageId&apos;.
</summary>
</member>
<member name="M:Paket.NuGetV2.getAllVersionsFromNugetODataWithFilter(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Control.FSharpAsync{System.String}},System.String,System.String)">
<summary>
 Gets versions of the given package via OData via /Packages?$filter=Id eq &apos;packageId&apos;
</summary>
</member>
<member name="">

</member>
<member name="T:Paket.NuGetV2">
<summary>
 Contains NuGet support.
</summary>
</member>
<member name="">

</member>
<member name="T:Paket.NuGetV3.JSONRootData">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:Paket.NuGetV3.JSONVersionData">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.NuGetV3.JSONResource">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.NuGetV3.FindPackages(Microsoft.FSharp.Core.FSharpOption{Paket.Utils.Auth},System.String,System.String,System.Int32)">
<summary>
 Uses the NuGet v3 autocomplete service to retrieve all packages with the given prefix.
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.NuGetV3.extractPackages(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.NuGetV3.FindVersionsForPackage(Microsoft.FSharp.Core.FSharpOption{Paket.Utils.Auth},System.String,System.String,System.Int32)">
<summary>
 Uses the NuGet v3 autocomplete service to retrieve all package versions for the given package.
</summary>
</member>
<member name="M:Paket.NuGetV3.extractVersions(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.NuGetV3.getSearchAPI(Microsoft.FSharp.Core.FSharpOption{Paket.Utils.Auth},System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.NuGetV3.calculateNuGet3Path(System.String)">
<summary>
 Calculates the NuGet v3 URL from a NuGet v2 URL.
</summary>
</member>
<member name="P:Paket.NuGetV3.searchDict">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.NuGetV3.getSearchAutocompleteService(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="T:Paket.NuGetV3">
<summary>
 Contains NuGet support.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.NupkgWriter">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.PackageMetaData">

</member>
<member name="">

</member>
<member name="T:Paket.PackageProcess">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.PackageResolver.ResolvedPackage">
<summary>
 Represents data about resolved packages
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.PackageResolver.PackageDetails">
<summary>
 Represents package details
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.PackageResolver.Resolve(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{Microsoft.FSharp.Collections.FSharpList{Paket.PackageSources.PackageSource},Paket.Domain.PackageName},Microsoft.FSharp.Collections.FSharpList{Paket.SemVerInfo}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Paket.PackageSources.PackageSource},Microsoft.FSharp.Core.FSharpFunc{Paket.Domain.PackageName,Microsoft.FSharp.Core.FSharpFunc{Paket.SemVerInfo,Paket.PackageResolver.PackageDetails}}},Microsoft.FSharp.Collections.FSharpList{Paket.Requirements.FrameworkRestriction},Microsoft.FSharp.Collections.FSharpList{Paket.Requirements.PackageRequirement})">
<summary>
 Resolves all direct and transitive dependencies
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.PackageResolver.DependencySetFilter">

</member>
<member name="T:Paket.PackageResolver">
<summary>
 Contains logic which helps to resolve the dependency graph.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.PackageSources.PackageSource">
<summary>
 Represents the package source type.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.PackageSources">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.PaketEnvModule">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.PlatformMatching">

</member>
<member name="M:Paket.Releases.downloadLatestBootstrapperAndTargets(Paket.PaketEnv)">
<summary>
 Downloads the latest version of the paket.bootstrapper and paket.targets to the .paket dir
</summary>
</member>
<member name="M:Paket.Releases.downloadLatestBootstrapper(Paket.PaketEnv)">
<summary>
 Downloads the latest version of the paket.bootstrapper to the .paket dir
</summary>
</member>
<member name="M:Paket.Releases.downloadLatestVersionOf(Microsoft.FSharp.Collections.FSharpList{System.String},System.String)">
<summary>
 Downloads the latest version of the given files to the destination dir
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.Releases">

</member>
<member name="">

</member>
<member name="M:Paket.RemoteDownload.downloadRemoteFiles(Paket.ModuleResolver.ResolvedSourceFile,System.String)">
<summary>
 Gets a single file from github.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.RemoteDownload.downloadDependenciesFile(System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,System.Boolean},Paket.ModuleResolver.ResolvedSourceFile)">
<summary>
 Gets a dependencies file from the remote source and tries to parse it.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.RemoteDownload">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.RemoteUpload">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.RemoveProcess">
<summary>
 Contains methods to remove of installed packages
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.Requirements.PackageRequirement">
<summary>
 Represents an unresolved package.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.Requirements">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.RestoreProcess.restore(System.String,Microsoft.FSharp.Collections.FSharpList{Paket.PackageSources.PackageSource},System.Boolean,Paket.LockFile,Microsoft.FSharp.Collections.FSharpSet{Paket.Domain.NormalizedPackageName})">
<summary>
 Restores the given dependencies from the lock file.
</summary>
</member>
<member name="M:Paket.RestoreProcess.ExtractPackage(System.String,Microsoft.FSharp.Collections.FSharpList{Paket.PackageSources.PackageSource},System.Boolean,Paket.PackageResolver.ResolvedPackage)">
<summary>
 Downloads and extracts a package.
</summary>
</member>
<member name="T:Paket.RestoreProcess">
<summary>
 Contains methods for the restore process.
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.SemVer.Parse(System.String)">
<summary>
 Parses the given version string into a SemVerInfo which can be printed using ToString() or compared
 according to the rules described in the [SemVer docs](http://semver.org/).
 ## Sample

     parse &quot;1.0.0-rc.1&quot;     &lt; parse &quot;1.0.0&quot;          // true
     parse &quot;1.2.3-alpha&quot;    &gt; parse &quot;1.2.2&quot;          // true
     parse &quot;1.2.3-alpha2&quot;   &gt; parse &quot;1.2.3-alpha&quot;    // true
     parse &quot;1.2.3-alpha002&quot; &gt; parse &quot;1.2.3-alpha1&quot;   // true
     parse &quot;1.5.0-beta.2&quot;   &gt; parse &quot;1.5.0-rc.1&quot;     // false
</summary>
</member>
<member name="T:Paket.SemVer">
<summary>
  Parser which allows to deal with [Semantic Versioning](http://semver.org/) (SemVer).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.Simplifier">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.TemplateFileModule">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.TemplateParser">

</member>
<member name="M:Paket.UpdateProcess.Update(System.String,Paket.UpdaterOptions)">
<summary>
 Update command
</summary>
</member>
<member name="M:Paket.UpdateProcess.UpdatePackage(System.String,Paket.Domain.PackageName,Microsoft.FSharp.Core.FSharpOption{System.String},Paket.UpdaterOptions)">
<summary>
 Update a single package command
</summary>
</member>
<member name="M:Paket.UpdateProcess.SmartInstall(System.String,System.Boolean,Microsoft.FSharp.Core.FSharpOption{Paket.Domain.NormalizedPackageName},Paket.UpdaterOptions)">
<summary>
 Smart install command
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.UpdateProcess">
<summary>
 Contains methods for the update process.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.Utils.FindAllFiles(System.String,System.String)">
<summary>
 Gets all files with the given pattern
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.Utils.askYesNo(System.String)">
<summary>
 If the guard is true then a [Y]es / [N]o question will be ask.
 Until the user pressed y or n.
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.Utils.safeGetFromUrl(Microsoft.FSharp.Core.FSharpOption{Paket.Utils.Auth},System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.Utils.getFromUrl(Microsoft.FSharp.Core.FSharpOption{Paket.Utils.Auth},System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.Utils.downloadFromUrl(Microsoft.FSharp.Core.FSharpOption{Paket.Utils.Auth},System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.Utils.normalizeXml(System.Xml.XmlDocument)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="M:Paket.Utils.createRelativePath(System.String,System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.Utils.CleanDir(System.String)">
<summary>
 Cleans a directory by deleting it and recreating it.
</summary>
</member>
<member name="M:Paket.Utils.createDir(System.String)">
<summary>
 Creates a directory if it does not exist.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Paket.Utils.ObservableExtensions.Observable.guard``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit},System.IObservable{``0})">
<summary>
 Creates an observable that calls the specified function after someone
 subscribes to it (useful for waiting using &apos;let!&apos; when we need to start
 operation after &apos;let!&apos; attaches handler)
</summary>
</member>
<member name="T:Paket.Utils.ObservableExtensions.Observable">

</member>
<member name="T:Paket.Utils.ObservableExtensions">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.Utils.String">

</member>
<member name="">

</member>
<member name="T:Paket.Utils.Seq">
<summary>
 [omit]
</summary>
</member>
<member name="T:Paket.Utils">
<summary>
 Contains methods for IO.
</summary>
</member>
<member name="M:Paket.VSIntegration.TurnOffAutoRestore(Paket.PaketEnv)">
<summary>
 Deactivates the Visual Studio Nuget autorestore feature in all projects
</summary>
</member>
<member name="M:Paket.VSIntegration.TurnOnAutoRestore(Paket.PaketEnv)">
<summary>
 Activates the Visual Studio Nuget autorestore feature in all projects
</summary>
</member>
<member name="T:Paket.VSIntegration">

</member>
<member name="M:Paket.Xml.getDescendants(System.String,System.Xml.XmlNode)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.Xml.getNodes(System.String,System.Xml.XmlNode)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.Xml.optGetNode``1(System.String,Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.Xml.getNode(System.String,System.Xml.XmlNode)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.Xml.optGetAttribute``1(System.String,Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.Xml.withAttributeValue(System.String,System.String,System.Xml.XmlNode)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.Xml.getAttribute(System.String,System.Xml.XmlNode)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.Xml.hasAttribute(System.String,System.Xml.XmlNode)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.Xml.addChild(System.Xml.XmlNode,System.Xml.XmlElement)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Paket.Xml.addAttribute(System.String,System.String,System.Xml.XmlElement)">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Paket.Xml.Linq">

</member>
<member name="T:Paket.Xml">

</member>
<member name="">

</member>
<member name="T:Paket.utils">

</member>
<member name="">

</member>
<member name="T:System.AssemblyVersionInformation">

</member>
</members>
</doc>
